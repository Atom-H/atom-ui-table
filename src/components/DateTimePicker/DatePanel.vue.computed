<template>
    <div class="cell-panel">
        <div class="weekdays">
            <span class="weekday" v-for="weekday in weekdays" :style="weekdayStyle">{{weekday}}</span>
        </div>
        <div class="days" :style="daysStyle">
            <span class="day day-prev" :style="dayStyle" v-for="day in prevMonthDays" :key="day.obj" @click="selectDay(day.obj)">
                {{day.num}}
            </span>
            <span :class="['day', i == activeIndex && 'active']" :style="dayStyle" v-for="(day, i) in days" :key="day.obj" @click="selectDay(day.obj, i)">
                {{day.num}}
            </span>
            <span class="day day-next" :style="dayStyle" v-for="day in nextMonthDays" :key="day.obj" @click="selectDay(day.obj)">
                {{day.num}}
            </span>
        </div>
    </div>
</template>
<script>
import moment from 'moment'
export default {
    name: 'PickPanel',

    props: {
        schedule: {
            type: Object
        },

        height: {
            type: String,
            default: '36px'
        },

        width: {
            type: String,
            default: '136px'
        },

        gutter: {
            type: String,
            default: '1px'
        },

        fontSize: {
            type: String,
            default: '12px'
        },

        borderWidth: {
            type: String,
            default: '1px'
        },

        format: {
            type: String,
            default: 'Y-MM-DD HH:mm:ss'
        },

        value: {
            type: String
        }
    },

    mounted() {
        moment.locale('zh-cn');
        this.prevMonthDays = this.getPrevMonthDays();
        this.days = this.getDays();
        this.nextMonthDays = this.getNextMonthDays();
    },

    data() {
        return {
            activeIndex: null,
            beginDayInMonth: {}, // 本月第一天
            weekdays: ['日', '一', '二', '三', '四', '五', '六'],
            prevMonthDays: [], // 存储前月的部分日期
            days: [], // 存储本月日期
            nextMonthDays: [] // 存储下个月的部分日期
        };
    },

    methods: {
        selectDay(obj, index = null) {
            this.activeIndex = index;
            this.$emit('input', obj.format(this.format));

        },

        getPrevMonthDays() {
            var days = [];
            // 本月的第一天
            this.beginDayInMonth = moment.utc(this.value).startOf('month');
            // 上个月最后一天
            var endDayInPrevMonth = moment(this.beginDayInMonth).subtract(1, 'day');
            // 上个月总天数
            var length = moment(endDayInPrevMonth).daysInMonth();

            // 上个月最后一天是周几
            var endDayWeekDayInPrevMonth = moment(endDayInPrevMonth).day();
            for (var i = 0; i <= endDayWeekDayInPrevMonth; i++) {
                var obj = moment(endDayInPrevMonth).subtract(i, 'day');
                var num = obj.date();
                days.splice(0, 0, {
                    num,
                    obj
                });
            }
            return days;
        },

        getDays() {

            var days = [];
            // 本月总天数
            var length = moment.utc(this.value).daysInMonth();
            for (var i = 1; i <= length; i++) {
                var obj = moment(this.beginDayInMonth).add(i - 1, 'day');

                if (moment(obj).isSame(this.value, 'day')) {
                    this.activeIndex = i;
                }

                var date = moment(obj).format(this.format);
                if(undefined != this.schedule[date]) {
                    var count = this.schedule[date].count;
                    days.push({
                        num: i,
                        obj, count
                    });
                } else {
                     days.push({
                        num: i,
                        obj
                    });                   
                }



            }
            return days;
        },

        getNextMonthDays() {

            var days = [];
            var length = 42 - this.prevMonthDays.length - this.days.length;
            // 下个月第一天
            var beginDayInNextMonth = moment(this.beginDayInMonth).add(1, 'month');
            for (var i = 1; i <= length; i++) {
                days.push({
                    num: i,
                    obj: moment(beginDayInNextMonth).add(i - 1, 'day')
                });
            }
            return days
        }

    },

    watch: {
        value(newDate, oldDate) {
            if (!moment(newDate).isSame(oldDate, 'month')) {
                this.prevMonthDays = this.getPrevMonthDays();
                this.days = this.getDays();
                this.nextMonthDays = this.getNextMonthDays();
            }
        }
    },

    computed: {
        weekdayStyle() {
            return {
                width: this.width,
                height: this.height,
                margin: this.gutter,
                lineHeight: this.height,
                fontSize: this.fontSize,
                borderWidth: this.borderWidth,
            };
        },

        dayStyle() {
            return {
                width: this.width,
                height: this.height,
                lineHeight: this.height,
                margin: this.gutter,
                fontSize: this.fontSize
            };
        },

        daysStyle() {
            // 匹配下单位
            // px/rem/em/...
            var unit = this.width.replace(/[\d]*/g, '');
            return {
                width: (parseInt(this.width) + parseInt(this.gutter) + 2 * parseInt(this.borderWidth)) * 7 + unit
            };
        }
    },

    destroyed() {

    }
}
</script>
<style scoped lang="scss">
@import '../../scss/theme.scss';
.cell-panel {
    box-shadow: 1px 2px 3px rgba(0, 0, 0, .1), -1px -2px 3px rgba(0, 0, 0, .1);
    margin: 15px;
    padding: 5px;
    overflow: hidden;
    display: inline-block;
    .weekdays {
        font-size: 0;
        .weekday {
            display: inline-block;
            text-align: center;
        }
    }
    .days {
        overflow: hidden;
        // 清除inline-block的空格间距
        font-size: 0;
        .day {
            transition: all .3s;
            display: inline-block;
            text-align: center;
            border-radius: 4px;
            border: 1px solid transparent;
            &:hover {
                background: $hover;
                cursor: pointer;
                color: $base;
            }
            &.active {
                border: 1px solid $base;
                color: $base;
            }
            &-prev {
                color: #ccc;
            }
            &-next {
                color: #ccc;
            }
        }
    }
}

// 动画
// .next-enter-active,
// .next-leave-active {
//     transition: all 1s;
// }
// .next-enter {
//     opacity: .5;
//     transform: translateX(30px);
// }
// .next-leave-active {
//     // opacity: .5;
//     // transform: translateX(-30px);
// }
</style>
